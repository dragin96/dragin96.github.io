{"version":3,"sources":["api/index.js","redux/action/currency.actions.js","components/Table.js","App.js","serviceWorker.js","redux/reducers/currency.reducer.js","redux/reducers/index.js","index.js","redux/store.js"],"names":["API_URL","a","url","URL","axios","get","href","then","response","status","Error","statusText","json","data","console","log","keys","Object","map","key","dateUpdate","Date","dateNow","toLocaleDateString","toLocaleTimeString","actions","updateRequest","dispatch","type","getCurrency","catch","e","error","message","useStyles","makeStyles","table","minWidth","MyTable","props","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","ID","NumCode","CharCode","Nominal","Name","Value","Previous","App","useDispatch","tableData","useSelector","state","currency","shallowEqual","useState","isUpdate","setIsUpdate","isLoading","loadTable","Valute","CircularProgress","Timestamp","nowDate","FormControlLabel","control","Checkbox","checked","onChange","statusRequest","interval","setInterval","clearInterval","setUpdateInfo","name","color","label","Boolean","window","location","hostname","match","initialState","combineReducers","action","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","Provider","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3caf7513.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_URL = 'https://www.cbr-xml-daily.ru/';\n\nexport async function getCurrency() {\n    const url = new URL(`${API_URL}/daily_json.js`);\n    return await axios.get(url.href).then(response => {\n        if (response.status !== 200) {\n            throw Error(response.statusText);\n        }\n        const json = response.data;\n        console.log('getCurrency');\n        const keys = Object.keys(json['Valute']);\n        json['Valute'] = keys.map((key) => {\n            return json['Valute'][key];\n        });\n        const dateUpdate = new Date(json['Timestamp']);\n        const dateNow = new Date();\n        json['Timestamp'] = `${dateUpdate.toLocaleDateString()} ${dateUpdate.toLocaleTimeString()}`;\n        json['nowDate'] = `${dateNow.toLocaleDateString()} ${dateNow.toLocaleTimeString()}`;\n        return json;\n    });\n}\n","import {getCurrency} from '../../api/index'\n\nexport const actions = {\n    LOAD_CURRENCY_LOADING: 'LOAD_CURRENCY_LOADING',\n    LOAD_CURRENCY_SUCCESS: 'LOAD_CURRENCY_SUCCESS',\n    LOAD_CURRENCY_FAILURE: 'LOAD_CURRENCY_FAILURE',\n};\n\nexport function loadCurrencyLoading() {\n    return {\n        type: actions.LOAD_CURRENCY_LOADING,\n    };\n}\n\nexport function loadCurrencySuccess(data) {\n    return {\n        type: actions.LOAD_CURRENCY_SUCCESS,\n        data,\n    };\n}\n\nexport function loadCurrencyFailure(error) {\n    return {\n        type: actions.LOAD_CURRENCY_FAILURE,\n        error\n    };\n}\nexport function updateRequest() {\n    return dispatch => {\n        dispatch(loadCurrency());\n    };\n}\n\nexport function loadCurrency() {\n    return dispatch => {\n        dispatch(loadCurrencyLoading());\n\n        getCurrency()\n            .then(json => dispatch(loadCurrencySuccess(json)))\n            .catch(e => dispatch(loadCurrencyFailure(e.message)));\n    };\n}\n","import React from \"react\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\nexport const MyTable = (props) => {\n    const classes = useStyles();\n    const {data} = props;\n    return (<TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>ID</TableCell>\n                    <TableCell align=\"right\">Номер кода валюты</TableCell>\n                    <TableCell align=\"right\">Код валюты</TableCell>\n                    <TableCell align=\"right\">Номинал</TableCell>\n                    <TableCell align=\"right\">Валюта</TableCell>\n                    <TableCell align=\"right\">Курс</TableCell>\n                    <TableCell align=\"right\">Предыдущий курс</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {data.map((row) => (\n                    <TableRow key={row.ID}>\n                        <TableCell align=\"right\">{row.ID}</TableCell>\n                        <TableCell align=\"right\">{row.NumCode}</TableCell>\n                        <TableCell align=\"right\">{row.CharCode}</TableCell>\n                        <TableCell align=\"right\">{row.Nominal}</TableCell>\n                        <TableCell align=\"right\">{row.Name}</TableCell>\n                        <TableCell align=\"right\">{row.Value}</TableCell>\n                        <TableCell align=\"right\">{row.Previous}</TableCell>\n                    </TableRow>\n                ))}\n            </TableBody>\n        </Table>\n    </TableContainer>);\n};\n","import React, {useState} from 'react';\nimport './App.css'\nimport {useDispatch, useSelector} from 'react-redux';\nimport {updateRequest} from \"./redux/action/currency.actions\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {MyTable} from \"./components/Table\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport shallowEqual from \"react-redux/es/utils/shallowEqual\";\n\nexport const App = () => {\n    const dispatch = useDispatch();\n    const tableData = useSelector(state => state.currency, shallowEqual);\n    const [isUpdate, setIsUpdate] = useState(false);\n\n    if (!tableData.data && !tableData.isLoading) {\n        dispatch(updateRequest());\n    }\n    const setUpdateInfo = (statusRequest) => {\n        console.log('start interval');\n        const interval = setInterval(() => {\n            if (statusRequest && !tableData.isLoading) {\n                dispatch(updateRequest());\n            }\n        }, 10000);\n        if (!statusRequest) {\n            clearInterval(interval);\n        }\n    };\n\n    const loadTable = !tableData.data ? <CircularProgress className='spinner'/> : <MyTable data={tableData.data.Valute}/>;\n    return (\n        <>\n            <div className='info'>\n                {tableData.data ? <div>Последнее обновление {tableData.data.Timestamp}</div> : ''}\n                {tableData.data ? <div>Запрошенно {tableData.data.nowDate}</div> : ''}\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={isUpdate}\n                            onChange={() => {\n                                setIsUpdate(!isUpdate);\n                                setUpdateInfo(!isUpdate)\n                            }}\n                            name=\"checkedB\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Обнавлять данные каждую минуту\"\n                />\n            </div>\n            {loadTable}\n        </>\n    )\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {actions} from '../action/currency.actions';\n\nconst initialState = {\n    data: null,\n    isLoading: false,\n};\n\nexport function currency(state = initialState, action) {\n    switch (action.type) {\n        case actions.LOAD_CURRENCY_LOADING:\n            return {\n                ...state,\n                isLoading: true,\n            };\n        case actions.LOAD_CURRENCY_SUCCESS:\n            return {\n                ...state,\n                data: action.data,\n                isLoading: false,\n            };\n        case actions.LOAD_CURRENCY_FAILURE:\n            return {\n                ...state,\n                isLoading: true,\n            };\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from 'redux';\nimport {currency} from \"./currency.reducer\";\n\nexport default combineReducers({\n    currency: currency\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Provider from \"react-redux/es/components/Provider\";\nimport configureStore from \"./redux/store\";\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif (process.env.NODE_ENV === 'development') {\n    import('./eruda').then(({default: eruda}) => {\n    }); //runtime download\n}\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\nimport {composeWithDevTools} from \"redux-devtools-extension\";\n\nexport default function configureStore(initialState) {\n    return createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(thunk)));\n}\n"],"sourceRoot":""}